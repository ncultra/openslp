Announcement (Updated 25 Mar 2008)
----------------------------------

The reasons for full Win32 support are _still_ valid: Namely, primarily that
Microsoft insists on supporting location protocols other than the one 
designed by the IETF. The hope is that by offering a really good port of 
OpenSLP, Microsoft enslaved developers and partners will have some
ammunition to fight proprietary or otherwise non-interoperable protocols.

Microsoft did one thing right, however, when they started to give their C++
compiler away. And with each new major version, the free tool set has gotten 
better and better. Visual Studio 2008 Exress, Visual C++ component comes
with a full IDE, and 32/64-bit compiler toolset. There is no longer any reason 
not to upgrade as soon as prudence requires, as there's effectively no end-
user cost associated with the process (short of the time it takes to 
download the 850 MB ISO image). 

The OpenSLP maintainers will now upgrade project and make files for the 
latest version of Visual Studio Express (read "free") with each new minor 
version of the OpenSLP project. This new policy begins with OpenSLP version 
2.0, which requires at least Visual Studio 2005 Express, Visual C++ component.
Please download this product (or the latest) from Microsoft at: 

    http://www.microsoft.com/express/vc

Visual Studio 2005 Express requires the user to acquire a recent version of
the WIN32 SDK.

Visual Studio 2008 Express version comes prepackaged and preconfigured to use
a reasonably recent version of the WIN32 SDK. The VS solution and project files
are configured for VS 2005, but VS 2008 will automatically upgrade them within
your work area. (If you're a maintainer, please don't accidentally commit the 
upgraded versions when you check in changes.)

Current State
-------------
Currently the OpenSLP code base does work on Win32 with the same
functionality as OpenSLP on Linux, with one exception. The lex/yacc files
that were originally written by Michael Day, which define the attribute 
language parser are not used on Win32 (for lack of tools). Rather, the 
original hand-coded version of this parser is being used. I'd be grateful
if someone would please help me get a version of the good stuff working -
one way or another. :)

Schedule
--------
Maintain simultaneous development with linux/unix from now on.

Building 
--------
As of OpenSLP 1.2.1, an MS Visual Studio "solution" (openslp.sln) file and
associated project files (*.vcproj) are provided in the win32 directory
structure.

Installing
----------
As of OpenSLP 2.0 beta 1, we now have an MSI installer.

To install by hand, for the library, all you have to do is copy the slp.h,
slp.lib and slp.dll files to the appropriate locations for your client 
application code to consume them.

slpd is pretty trivial to install now that we have a command line interface
to the service registry, so it's easy as 1, 2, 3 (literally):

1. Copy slp.reg and slp.conf to %SystemRoot%
2. Copy slpd.exe to %SystemRoot%/System32
3. From this location, execute: "slpd.exe --install [auto]"

Note that the log file (slpd.log) will be created in %SystemRoot%. This can 
be changed, but it's not obvious how to do it unless you happen to know a
fair amount about how Win32 services work. Essentially, you have to specify
the log file option on the service command line, rather than on the 
slpd -start command line like this: Open Control Panel | Administrative 
Tools | Services. Right-click on the "Service Location Protocol" service
and choose "Properties". Stop the service if it's running. Add the log file
option ("-l <my path>") to the "Service Parameters" edit box. Restart the 
service. This parameter change is persistent, so you need do this only once.
This note applies to all Win32 service startup parameters for slpd.exe.

Credits
-------
The work currently being done on the Win32 port in no way invalidates the 
tremendous contribution of Matthieu Desmons who did the original port of the 
0.7.x codebase.  Most of the actual code changes can still be attributed to 
him -- not to mention the initive to to show that the port was actually 
possible.
